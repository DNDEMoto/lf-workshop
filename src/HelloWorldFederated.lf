target C {
    timeout: 10 secs,
    coordination: decentralized,
    docker: false
};

/**
 * Reactor that generates a sequence of messages, one per second.
 * The message will be a string consisting of a prefix string followed
 * by a count.
 * @param prefix The prefix string.
 * @output message The message.
 */
 reactor MessageGenerator(prefix:string("")) {
    // Output type char* instead of string is used for dynamically
    // allocated character arrays (as opposed to static constant strings).
    output message:char*;
    state count:int(1);
    // Send first message after 1 sec so that the startup reactions
    // do not factor into the transport time measurement on the first message.
    timer t(1 sec, 1 sec);
    reaction(t) -> message {=
        // With NULL, 0 arguments, snprintf tells us how many bytes are needed.
        // Add one for the null terminator.
        int length = snprintf(NULL, 0, "%s %d", self->prefix, self->count) + 1;
        // Dynamically allocate memory for the output.
        SET_NEW_ARRAY(message, length);
        // Populate the output string and increment the count.
        snprintf(message->value, length, "%s %d", self->prefix, self->count++);

        tag_t tag = lf_tag();
        lf_print("At (elapsed) logical tag (%lld, %u), source sends message: %s",
            tag.time - start_time, tag.microstep,
            message->value
        );
    =}
}

/**
 * Reactor that prints the current tag and an incoming string.
 *
 * @input message The message.
 */
reactor PrintMessage {
    input message:char*;
    reaction(message) {=
        tag_t tag = lf_tag();
        lf_print("At (elapsed) logical tag (%lld, %u), print receives: %s",
            tag.time - start_time, tag.microstep,
            message->value
        );
    =}
}

federated reactor {
    source = new MessageGenerator(prefix = "Hello World");
    print = new PrintMessage();
    source.message -> print.message;
}